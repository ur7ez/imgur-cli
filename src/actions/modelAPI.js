/**
 * complete Imgur API here: https://apidocs.imgur.com/
 */

class ImgurAPI {
    constructor() {

        this.urlAPI = 'https://api.imgur.com/3';  // API endpoint url

        this.client = {  // registration: used to authorize the user to your app
            client_ID: 'af917f7dc548c6c',
            client_secret: '8a52e7a0aa59cf0006b1d6ec3bb5395c212c7bcf',
            state: '',
        };
        this.user_auth = {
            // access_token is your secret key used to access the user's data. It can be thought of the user's password and username combined into one, and is used to access the user's account. It expires after 1 month.
            access_token: '',
            // refresh_token is used to request new access_tokens. Since access_tokens expire after 1 month, we need a way to request new ones without going through the entire authorization step again. It does not expire. If your application loses the refresh token, you will have to prompt the user for their login information again.
            refresh_token: '',
            expires_in: 0,  // lifetime of the token in seconds
            token_type: '',  // the kind of token that is being returned
            account_username: '',
            account_id: '',
        };
        this.params = {
            section: ['hot', 'top', 'user'],  // default is 'hot'
            sort: ['viral', 'top', 'time', 'rising'],  // defaults to 'viral'
            // 'rising' only available with 'user' section
            window: ['day', 'week', 'month', 'year', 'all'],  // defaults to 'day'
            // Change the date range of the request if the section is 'top'.
            // Accepted values are day | week | month | year | all.
            page: 0,  // integer - the data paging number
            showViral: true,
            showMature: false,
            albumPreviews: false,
            tagName: 'Aww',
            galleryHash: '',
            galleryImageHash: '',
            albumHash: '',
            q: '',  // Query string (note: if advanced search parameters are set, this query string is ignored). This parameter also supports boolean operators (AND, OR, NOT) and indices (tag: user: title: ext: subreddit: album: meme:). An example compound query would be 'title: cats AND dogs ext: gif'
            vote: ['up', 'down', 'veto'],  // Vote for an image, 'up' or 'down' vote. Send 'veto' to undo a vote
        };
    }

    ImgurAPImodel(model, method, cli, user, env) {
        let urlAPI = this.urlAPI;

        // For public read-only and anonymous resources, such as getting image info, looking up user comments, etc.
        // all you need to do is send an authorization header with your client_id in your requests. This also works if you'd like to upload images anonymously (without the image being tied to an account), or if you'd like to create an anonymous album.
        let clientID = `Client-ID ${cli.client_ID}`;
        let bearer = `Bearer ${user.access_token}`;
        let Authorization = (user.access_token !== '') ? bearer : clientID;

        let form = new FormData();
        form.append("refresh_token", `${user.refresh_token}`);
        form.append("client_id", `${cli.client_ID}`);
        form.append("client_secret", `${cli.client_secret}`);
        form.append("grant_type", "refresh_token");

        let APImodel = {
            authorization: [  // needed for accessing a user's account
                {
                    name: 'authorize',
                    description: 'To access a user\'s account, the user must first authorize your application so that you can get an access token. If the \'state\' parameter was included in the request, then it is also included in the response',
                    url: `${urlAPI.slice(0, -2)}/oauth2/authorize?client_id=${cli.client_ID}&response_type=token&state=${cli.state}`,
                    // if the 'state' parameter was included in the request, then it is also included in the response
                    method: 'GET',
                },
                {
                    name: 'token',
                    description: 'If a user has authorized their account but you no longer have a valid' +
                    ' \'access_token\' for them, then a new one can be generated by using the refresh_token received' +
                    ' during authorization process',
                    url: `${urlAPI.slice(0, -2)}/oauth2/token`,
                    method: 'POST',
                    data: {
                        crossDomain: true,
                        processData: false,
                        contentType: false,
                        mimeType: "multipart/form-data",
                        data: form
                    },
                }
            ],
            account: [
                {
                    name: 'account base',
                    description: 'Request standard user information. If you need the username for the account that is logged in, it is returned in the request for an access token. Note: This endpoint also supports the ability to lookup account base info by account ID. To do so, pass the query parameter "account_id".',
                    url: `${urlAPI}/account/${user.account_username}`,
                    url2: `${urlAPI}/account?account_id=${user.account_id}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'account gallery profile',
                    description: 'Returns the totals for the gallery profile',
                    url: `${urlAPI}/account/${user.account_username}/settings`,
                    method: 'GET',
                    headers: {
                        Authorization: bearer
                    }
                },
            ],
            gallery: [
                {
                    name: 'gallery',
                    description: 'Returns gallery posts (images, albums)',
                    url: `${urlAPI}/gallery/${env.section}/${env.sort}/${env.window}/${env.page}?showViral=${env.showViral}&mature=${env.showMature}&album_previews=${env.albumPreviews}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'gallery tag',
                    description: 'Returns tag metadata, and posts tagged with the tagName provided',
                    url: `${urlAPI}/gallery/t/${env.tagName}/${env.sort}/${env.window}/${env.page}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'gallery tags',
                    description: 'Gets a list of default tags',
                    url: `${urlAPI}/tags`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'gallery album',
                    description: 'Get additional information about an album in the gallery.',
                    url: `${urlAPI}/gallery/album/${env.galleryHash}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'gallery image',
                    description: 'Get additional information about an image in the gallery.',
                    url: `${urlAPI}/gallery/image/${env.galleryImageHash}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'gallery search',
                    description: 'Search the gallery with a given query string.',
                    url: `${urlAPI}/gallery/search/${env.sort}/${env.window}/${env.page}?q=${env.q}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'album / image votes',
                    description: 'Get the vote information about an image',
                    url: `${urlAPI}/gallery/${env.galleryHash}/votes`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'album / image voting',
                    description: 'Vote for an image, up or down vote. Send veto to undo a vote.',
                    url: `${urlAPI}/gallery/${env.galleryHash}/vote/${env.vote}`,
                    method: 'POST',
                    headers: {
                        Authorization: bearer
                    }
                },
            ],
            album: [
                {
                    name: 'album',
                    description: 'Get additional information about an album',
                    url: `${urlAPI}/album/${env.albumHash}`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
                {
                    name: 'album images',
                    description: 'Return all of the images in the album',
                    url: `${urlAPI}/album/${env.albumHash}/images`,
                    method: 'GET',
                    headers: {
                        Authorization
                    }
                },
            ]
        };

        return APImodel[model].find(x => x.name === method);
    }

    set client_Auth(client_options) {
        Object.assign(this.client, client_options);
    }

    set user_Auth(user_options) {
        Object.assign(this.user_auth, user_options);
    }

    get APIparams() {
        return this.params;
    }

    env_Params(params_options) {
        return {
            ...this.params,
            section: this.params.section[0],
            sort: this.params.sort[0],
            window: this.params.window[0],
            ...params_options
        };
    }

    getRequestOptions(APImodel = 'gallery', APImethod = 'gallery', new_env_params = {}, alternate_url = false) {
        let model = this.ImgurAPImodel(
            APImodel, APImethod,
            this.client, this.user_auth,
            this.env_Params(new_env_params)
        );
        let {url, method = 'GET', headers = {}, data, ...rest} = model;
        let urlSelected = (alternate_url && rest.url2) ? rest.url2 : url;
        let options = Object.assign({}, {url: urlSelected, method, headers}, data);

        return JSON.parse(JSON.stringify(options)); // to remove undefined keys
    }
}

const modelAPI = new ImgurAPI();
export default modelAPI;
export const APIparams = modelAPI.APIparams;